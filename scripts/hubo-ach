#!/bin/bash

# Daniel M. Lofaro (dan@danlofaro.com)
# M.X. Grey ( mxgrey@gatech.edu )
# Last updated: 2013-07-19

export LD_LIBRARY_PATH=/usr/lib:


HUBO_BITRATE=0x0014 # 1 Mbit/s
#HUBO_BITRATE=0x001C #	500 kbit/s
#HUBO_BITRATE=0x011C #	250 kbit/s
#HUBO_BITRATE=0x031C #	125 kbit/s
#HUBO_BITRATE=0x432F #	100 kbit/s
#HUBO_BITRATE=0x472F #	50 kbit/s
#HUBO_BITRATE=0x532F #	20 kbit/s
#HUBO_BITRATE=0x672F #	10 kbit/s
#HUBO_BITRATE=0x7F7F #	5 kbit/s

HUBO_REF_CHAN='hubo-ref'
HUBO_STATE_CHAN='hubo-state'
HUBO_INIT_CMD='hubo-board-cmd'
HUBO_GAINS_CHAN='hubo-pwm-gains'
HUBO_BOARD_PARAM='hubo-board-param'
HUBO_VIRTUAL='hubo-virtual-to-sim'
HUBO_VIRTUAL='hubo-virtual-from-sim'


DAEMON_DIR='/etc/hubo-ach'
HUBO_LOG_DIR="$DAEMON_DIR/log"
HUBO_LOG_MAX=10

var=$(date)
HUBO_NAME_TMP_DATE=$(date)
TMP=$(echo -n "${var//[[:space:]]/}")
HUBO_LOG_NAME=$TMP
HUBO_LOG_FULL_NAME="$HUBO_LOG_DIR/$HUBO_LOG_NAME.log"
DAEMON_LOG_DIR='/var/log/hubo'
LOCK_DIR='/var/lock/hubo'

FLAG_NOCONSOLE=0
FLAG_DRC_MODE=0
FLAG_NO_LOG_MODE=0
FLAG_DRC_HUBO=0
FLAG_DRC_HUBO_SIM='drc'
FLAG_OPENHUBO_SIM='openhubo'
FLAG_OPENHUBO=$FLAG_OPENHUBO_SIM

#sudo echo "i $HUBO_BITRATE e" > /dev/pcan0 
#sudo echo "i $HUBO_BITRATE e" > /dev/pcan1

trim()
{
  local var=$@
  echo -n "${var//[[:space:]]/}"
}


MakeAch()
{

	ach -1 -C hubo-ref -m 10 -n 3000
	ach -1 -C hubo-state -m 10 -n 3000
	ach -1 -C hubo-board-cmd -m 10 -n 3000
        ach -1 -C hubo-pwm-gains -m 10 -n 3000
        ach -1 -C hubo-board-param -m 10 -n 3000
	ach -1 -C hubo-virtual-to-sim -m 10 -n 3000
	ach -1 -C hubo-virtual-from-sim -m 10 -n 3000
        sudo chmod 777 /dev/shm/achshm-hubo-*
}

Load()
{

hubo-ach daemon drc
echo 'Loading Hubo joint table'
case $2 in 
	'beta1')
		echo 'Beta-1'
		sudo hubo-homeparams -l /etc/hubo-ach/drc-hubo-beta-1-default.home
	;;
	'beta2')
		echo 'Beta-2'
		sudo hubo-homeparams -l /etc/hubo-ach/drc-hubo-beta-2-default.home
	;;
	'rainbow2')
		echo 'Rainbow-beta-2'
		sudo hubo-homeparams -l /etc/hubo-ach/drc-hubo-beta-2-rainbow-default.home
	;;
	*)
		echo 'No change - no file loaded'
	;;
	esac

hubo-ach killall

}




Clean()
{
	sudo cp /etc/hubo-ach/hubo-ach-safe-clean.sh /tmp/hubo-ach-safe-clean.sh
	sudo chmod +x /tmp/hubo-ach-safe-clean.sh
	source /tmp/hubo-ach-safe-clean.sh
}

Update()
{
        sudo apt-get install python-pip
        sudo pip install http://code.golems.org/src/ach/py_ach-latest.tar.gz
	sudo rm /tmp/hubo-ach* 
	cat /etc/hubo-ach/hubo-ach-safe-clean.sh > /tmp/hubo-ach.update
#	sudo echo "sudo rm $(ls /tmp/ | grep hubo | grep deb)" >> /tmp/hubo-ach.update
	case $1 in
	'develop')
		echo "****** updating to Hubo-Ach Develop ******" 
		sudo echo "sudo wget http://danlofaro.com/software/hubo-ach/latest-develop/hubo-ach-dev_amd64.deb -P /tmp" >> /tmp/hubo-ach.update
		sudo echo "sudo wget http://danlofaro.com/software/hubo-ach/latest-develop/hubo-ach_amd64.deb -P /tmp" >> /tmp/hubo-ach.update
		sudo echo "sudo wget http://danlofaro.com/software/hubo-ach/latest-develop/hubo-ach-dev_i386.deb -P /tmp" >> /tmp/hubo-ach.update
		sudo echo "sudo wget http://danlofaro.com/software/hubo-ach/latest-develop/hubo-ach_i386.deb -P /tmp" >> /tmp/hubo-ach.update
	;;
	*)
		echo "****** updating to Hubo-Ach Release ******"
		sudo echo "sudo wget http://danlofaro.com/software/hubo-ach/latest/hubo-ach-dev_amd64.deb -P /tmp" >> /tmp/hubo-ach.update
		sudo echo "sudo wget http://danlofaro.com/software/hubo-ach/latest/hubo-ach_amd64.deb -P /tmp" >> /tmp/hubo-ach.update
		sudo echo "sudo wget http://danlofaro.com/software/hubo-ach/latest/hubo-ach-dev_i386.deb -P /tmp" >> /tmp/hubo-ach.update
		sudo echo "sudo wget http://danlofaro.com/software/hubo-ach/latest/hubo-ach_i386.deb -P /tmp" >> /tmp/hubo-ach.update
	;;
	esac

	case $1 in 
	'apt-get')
		echo "****** updating to Hubo-Ach via apt-get ******"
		sudo echo "sudo apt-get update" >> /tmp/hubo-ach.update
		sudo echo "sudo apt-get --yes --force-yes install hubo-ach-dev" >> /tmp/hubo-ach.update
	;;
	*)

		case "$(uname -m)" in
		'x86_64')
			echo "64 bit system detected"
			sudo echo "sudo dpkg -i /tmp/hubo-ach_amd64.deb /tmp/hubo-ach-dev_amd64.deb" >> /tmp/hubo-ach.update
		;;
		'i686')
			echo "32 bit system detected"
			sudo echo "sudo dpkg -i /tmp/hubo-ach_i386.deb /tmp/hubo-ach-dev_i386.deb" >> /tmp/hubo-ach.update
		;;
		'i586')
			echo "32 bit system detected"
			sudo echo "sudo dpkg -i /tmp/hubo-ach_i386.deb /tmp/hubo-ach-dev_i386.deb" >> /tmp/hubo-ach.update
		;;
		esac
	;;
	esac

	sudo chmod +x /tmp/hubo-ach.update
	source /tmp/hubo-ach.update
}

Kill()
{
#	sudo updatedb
	sudo kill -9 $(pidof hubo*)
	sudo kill -9 $(pidof hubo-daemon)
	sudo kill -9 $(pidof hubo-read)
	sudo kill -9 $(pidof hubo-console)
        sudo kill -9 $(pidof hubo-log)
}

Remote()
{

case "$1" in 
'kill')
	KillRemote
;;
*)
	MakeAch
	achd -r push $1 hubo-ref &
	achd -r pull $1 hubo-state &
	achd -r push $1 hubo-board-cmd &
        achd -r push $1 hubo-virtual-from-sim &
        achd -r pull $1 hubo-virtual-to-sim &
;;
esac

}

Read()
{
	case "$1" in 
	'kill')
		sudo kill -9 $(pidof hubo-read)
	;;
	*)
       		sudo hubo-read
	;;
	esac
}

KillRemote()
{
	sudo kill -9 $(pidof achd)
}

KillAll()
{
	StopHubo $2
	KillHubo
	Kill
	sudo rm $LOCK_DIR/hubo-daemon
	sudo rm /dev/shm/achshm-hubo*
	KillRemote
}

StopHubo()
{
	case "$1" in
	'help')
		echo
		echo
		echo 'This will shut down the'
		echo 'hubo-daemon gracefully,'
		echo 'close all ach channels, and'
		echo 'put down the CAN devices.'
		echo
		echo 'This is the recommended way'
		echo 'to close down hubo-daemon.'
		echo
		echo 'If this fails to turn off'
		echo 'or unlock the daemon, try:'
		echo '   sudo ./run.sh kill'
		echo
		echo
	;;

	*)
		sudo killall -e hubo-daemon
                sudo kill -9 $(pidof hubo-log)
		sudo ach -U hubo-ref
		sudo ach -U hubo-state
		sudo ach -U hubo-board-cmd
                sudo ach -U hubo-pwm-gains
                sudo ach -U hubo-board-param
        

		sudo ifconfig can0 down &>/dev/null 
		sudo ifconfig can1 down &>/dev/null
		sudo ifconfig can2 down &>/dev/null
		sudo ifconfig can3 down &>/dev/null

	;;
	esac
}

StartLog()
{
  sudo mkdir $HUBO_LOG_DIR &>/dev/null 
  sudo chmod -R 777 $HUBO_LOG_DIR
  echo ' '
  echo "Log File: $HUBO_LOG_FULL_NAME"
  echo ' '
  cd $HUBO_LOG_DIR
  (ls -t|head -n $HUBO_LOG_MAX;ls)|sort|uniq -u|xargs rm &>/dev/null
  sudo hubo-log -f $HUBO_LOG_FULL_NAME
}

ClearLog()
{
  sudo rm -R $HUBO_LOG_DIR
  sudo mkdir $HUBO_LOG_DIR &>/dev/null 
  echo 'Logs Cleared'
}


StartHubo()
{

    SetHuboType $2
#   case "$2" in
#   'drc')
#        sudo rm /etc/hubo-ach/joint.table
#        sudo cp /etc/hubo-ach/drc-hubo.joint.table /etc/hubo-ach/joint.table
#        sudo rm /etc/hubo-ach/sensor.table
#        sudo cp /etc/hubo-ach/drc-hubo.sensor.table /etc/hubo-ach/sensor.table
#        FLAG_DRC_MODE=1
#        echo 'Loaded DRC-Hubo Joint Table'
#    ;;
#    *)   
#        sudo rm /etc/hubo-ach/joint.table
#        sudo cp /etc/hubo-ach/huboplus.joint.table /etc/hubo-ach/joint.table
#        sudo rm /etc/hubo-ach/sensor.table
#        sudo cp /etc/hubo-ach/huboplus.sensor.table /etc/hubo-ach/sensor.table
#        echo 'Loaded Hubo Plus Joint Table'
#   esac
#
#   sudo sync
#   sudo sleep 1
 
   RunDaemon
   if [[ $FLAG_NOCONSOLE -eq 0 ]]
   then
       echo 'Starting in Console Mode'
       StartConsole
   else
       echo 'Starting in No Console Mode'
   fi
}


SetHuboType()
{
   case "$1" in
   'drc')
        sudo rm /etc/hubo-ach/joint.table
        sudo cp /etc/hubo-ach/drc-hubo.joint.table /etc/hubo-ach/joint.table
        sudo rm /etc/hubo-ach/sensor.table
        sudo cp /etc/hubo-ach/drc-hubo.sensor.table /etc/hubo-ach/sensor.table
        FLAG_DRC_MODE=1
        echo 'Loaded DRC-Hubo Joint Table'
    ;;
    *)
        sudo rm /etc/hubo-ach/joint.table
        sudo cp /etc/hubo-ach/huboplus.joint.table /etc/hubo-ach/joint.table
        sudo rm /etc/hubo-ach/sensor.table
        sudo cp /etc/hubo-ach/huboplus.sensor.table /etc/hubo-ach/sensor.table
        echo 'Loaded Hubo Plus Joint Table'
   esac

   sudo sync
   sudo sleep 1

}


RunDaemon()
{

	case "$2" in
	'help')
		echo
		echo
		echo 'This will switch all the CAN'
		echo 'devices to up mode, open all'
		echo 'ach channels, boot up the'
		echo 'hubo-daemon, and start up'
		echo 'the hubo-console.'
		echo
		echo 'You can pass in arguments to the'
		echo 'hubo-daemon by appending them to'
		echo 'your run.sh start command. Example:'
		echo "   sudo ./run.sh start -v -d"
		echo 'will run the daemon while passing'
		echo 'in the arguments -v and -d'
		echo
		echo
	;;

	*)


		if [ $(pidof hubo-daemon) -gt 0		]
                then
	            exit 0 
                else

			sudo echo "i $HUBO_BITRATE e" > /dev/pcan0
			sudo echo "i $HUBO_BITRATE e" > /dev/pcan1
	    		sudo ifconfig can0 up &>/dev/null
			sudo ifconfig can1 up &>/dev/null
			sudo ifconfig can2 up &>/dev/null
			sudo ifconfig can3 up &>/dev/null

#		sudo ach -1 -C hubo-ref -m 10 -n 3000
#		sudo ach -1 -C hubo-ref-filter -m 10 -n 3000
#		sudo ach -1 -C hubo-state -m 10 -n 3000
#		sudo ach -1 -C hubo-init-cmd -m 10 -n 3000

			MakeAch
#		ach -1 -C hubo-ref -m 10 -n 3000
#		ach -1 -C hubo-ref-filter -m 10 -n 3000
#		ach -1 -C hubo-state -m 10 -n 3000
#		ach -1 -C hubo-init-cmd -m 10 -n 3000
                        if [[ $FLAG_NO_LOG_MODE -eq 1 ]]
                        then
                          echo ' '
                          echo 'No Logging Mode'
                          echo ' '
                        else
                          StartLog
                        fi
                         
			DAEMON_ARGS=''
			for IN_ARG in $@
			do
				if [ $IN_ARG != 'start'          ]
				then
					DAEMON_ARGS+=" $IN_ARG"
				fi
			done
                        if [[ $FLAG_DRC_MODE -eq 1 ]]
                        then
                          DAEMON_ARGS+=" -drc"
                        fi
       	             	sudo hubo-daemon $DAEMON_ARGS 
                fi
	;;
	esac
}

StartConsole()
{
   hubo-console
}

MakeVCan()
{
                sudo rmmod vcan
                sudo modprobe vcan

                sudo ip link add type vcan
                sudo ifconfig vcan0 up
                sudo ip link add type vcan
                sudo ifconfig vcan1 up
                sudo ip link add type vcan
                sudo ifconfig vcan2 up
                sudo ip link add type vcan
                sudo ifconfig vcan3 up
}

VirtualHubo()
{
	case "$1" in
	'help')
		echo
		echo
		echo 'This is the same as running'
		echo '   sudo ./run.sh start -v'
		echo 'which runs the daemon in'
		echo 'virtual mode.'
		echo
		echo 'Virtual mode allows you to'
		echo 'run the daemon without sending'
		echo 'actual CAN commands. This way'
		echo 'the processes can be run on a'
		echo 'computer without a CAN card.'
		echo
		echo 'While running virtual mode,'
		echo 'the computer will not'
		echo 'communicate in any way with'
		echo "Hubo's hardware."
		echo
		echo
	;;

	*)
		MakeVCan
		MakeAch
		sudo hubo-daemon -v
		sudo hubo-console
	;;
	esac
}

SetSim()
{
		MakeVCan
		MakeAch
		sudo hubo-daemon -o
}
Sim()
{
		SetSim
		sudo hubo-console
}

OpenHubo()
{

	case "$3" in
	'physics')
		SetSim
                HUBO_SIM_ARGS='physics '$FLAG_OPENHUBO
	        python -i /etc/hubo-ach/virtualHubo.py $HUBO_SIM_ARGS
		#python -i /etc/hubo-ach/virtualHubo.py physics
	;;
	
	'nophysics')
        	case "$4" in
		'simtime')
                        case "$5" in 
			'remote')
				Remote $6
                                HUBO_SIM_ARGS='nophysics simtime '$FLAG_OPENHUBO
				python -i /etc/hubo-ach/virtualHubo.py $HUBO_SIM_ARGS
				#python -i /etc/hubo-ach/virtualHubo.py nophysics simtime $FLAG_OPENHUBO
			;;
			*)
				SetSim
                                HUBO_SIM_ARGS='nophysics simtime '$FLAG_OPENHUBO
				python -i /etc/hubo-ach/virtualHubo.py $HUBO_SIM_ARGS
				#python -i /etc/hubo-ach/virtualHubo.py nophysics simtime $FLAG_OPENHUBO
			;;
			esac
		;;
		*)
                        case "$4" in 
			'remote')
				Remote $5
                                HUBO_SIM_ARGS='nophysics '$FLAG_OPENHUBO
				python -i /etc/hubo-ach/virtualHubo.py $HUBO_SIM_ARGS
				#python -i /etc/hubo-ach/virtualHubo.py nophysics $FLAG_OPENHUBO
			;;
			*)
				RunDaemon
                                HUBO_SIM_ARGS='nophysics '$FLAG_OPENHUBO
				python -i /etc/hubo-ach/virtualHubo.py $HUBO_SIM_ARGS
				#python -i /etc/hubo-ach/virtualHubo.py nophysics $FLAG_OPENHUBO
			;;
			esac
		;;
		esac
	;;
	*) 
		echo 'No Physics mode chosen'
	;;
	esac
}

DebugHubo()
{
	case "$1" in
	'help')
		echo
		echo
		echo 'This is the same as running'
		echo '   sudo ./run.sh start -d'
		echo 'which runs the daemon in'
		echo 'debug mode.'
		echo
		echo 'This mode produces a lot of'
		echo 'output which can flood memory'
		echo 'space. You should only run this'
		echo 'mode when investigating problems'
		echo 'and do not leave it running for'
		echo 'more than a short time.'
		echo
		echo
	;;

	*)

		sudo ifconfig can0 up
		sudo ifconfig can1 up
		sudo ifconfig can2 up
		sudo ifconfig can3 up


		MakeAch

#		sudo ach -1 -C hubo-ref -m 10 -n 3000
#		sudo ach -1 -C hubo-state -m 10 -n 3000
#		sudo ach -1 -C hubo-init-cmd -m 10 -n 3000

		sudo hubo-daemon -d $1
		sleep 1
		sudo hubo-console
	;;
	esac
}

KillHubo()
{
	case "$1" in
	'help')
		echo
		echo
		echo 'This forces the daemon to turn off'
		echo 'with no regard for safety or grace.'
		echo 'This should only be used if'
		echo '   sudo ./run.sh stop'
		echo 'is not working for some reason.'
		echo
		echo 'You can also use this to unlock'
		echo 'hubo-daemon if it is considered to'
		echo 'be locked when it should not be.'
		echo '(i.e. if a new instance of'
		echo ' hubo-daemon refuses to turn on'
		echo ' even though it should)'
		echo
		echo

	;;

	*)
		# This forcibly interrupts all hubo-daemon processes
		sudo killall -e -s SIGKILL hubo-daemon

		# This forcibly unlocks hubo-daemon
		sudo rm /var/lock/hubo/hubo-daemon
	;;
	esac
}

LogHubo()
{


	case "$1" in
	'help')
		echo
		echo
		echo 'This prints out all recent Hubo logs.'
		echo
		echo 'The logs are split into three parts:'
		echo '1) The system log'
		echo '   This deals with the daemonization'
		echo '   and other process management'
		echo '   procedures.'
		echo '2) The standard output'
		echo '   These are operational messages.'
		echo '   Anything in hubo-daemon which is'
		echo '   sent to stdout is redirected here.'
		echo '3) The error output'
		echo '   These are error-related messages.'
		echo '   Anything in hubo-daemon which is'
		echo '   sent to stderr is redirected here.'
		echo
		echo
	;;

	*)
		echo
		echo "System Log:"
		tail /var/log/syslog | grep hubo-daemon
		echo "_______________________________"
		echo
		echo "Hubo Output:"
		cat $DAEMON_LOG_DIR/daemon-output
		echo "_______________________________"
		echo
		echo "Hubo Errors:"
		cat $DAEMON_LOG_DIR/daemon-error
		echo
	;;
	esac
}

SaveLog()
{
	case "$1" in
	'help')
		echo
		echo
		echo 'Type the following into the terminal:'
		echo '   sudo ./run.sh savelog filename.log'
		echo 'in order to save the latest logs into'
		echo 'the file filename.log'
		echo
		echo 'Note that this will overwrite anything'
		echo 'currently contained in filename.log'
		echo
		echo 'If you do not specify a filename, the'
		echo 'logs will automatically go to saved.log'
		echo
		echo
	;;

	'')
		echo "System Log:" > saved.log
		tail /var/log/syslog | grep hubo-daemon >> saved.log
		echo "_______________________________" >> saved.log
		echo >> saved.log
		echo "Hubo Output:" >> saved.log
		cat $DAEMON_LOG_DIR/daemon-output >> saved.log
		echo "_______________________________" >> saved.log
		echo >> saved.log
		echo "Hubo Errors:" >> saved.log
		cat $DAEMON_LOG_DIR/daemon-error >> saved.log
	;;

	*)
		echo "System Log:" > $1
		tail /var/log/syslog | grep hubo-daemon >> $1
		echo "_______________________________" >> $1
		echo >> $1
		echo "Hubo Output:" >> $1
		cat $DAEMON_LOG_DIR/daemon-output >> $1
		echo "_______________________________" >> $1
		echo >> $1
		echo "Hubo Errors:" >> $1
		cat $DAEMON_LOG_DIR/daemon-error >> $1
	;;
	esac
}

# Config file installation should be handled by `make install` or
# package manager -ntd

# ConfigHubo()
# {
#	case "$1" in
#	'help')
#		echo
#		echo
#		echo 'This is a first-time setup script'
#		echo 'which creates some directories and'
#		echo 'default files which are needed for'
#		echo 'the hubo-daemon and other tools.'
#		echo
#		echo 'This only needs to be run once'
#		echo 'ever on your computer.'
#		echo
#		echo
#	;;

#	*)
#		sudo mkdir $DAEMON_DIR
#		sudo cp joint.table $DAEMON_DIR/joint.table
#		sudo cp joint.table $DAEMON_DIR/default-joint.table
#		sudo chmod a-w $DAEMON_DIR/default-joint.table
#	;;
#	esac
# }

ParamHubo()
{
	case "$1" in
	'help')
		echo
		echo
		echo 'Type the following into the terminal:'
		echo '   sudo ./run.sh filename.table'
		echo 'to use the values given in filename.table'
		echo "as Hubo's joint motor controller"
		echo 'parameters.'
		echo
		echo 'Type the following:'
		echo '   sudo ./run.sh default'
		echo 'to have the parameters return to their'
		echo 'default values.'
		echo
		echo
	;;

	'')
		echo
		echo
		echo 'You need to specify a file name!'
		echo
		echo
	;;
	*)
		cp -f $1 $DAEMON_DIR/joint.table
	;;
	esac

}

DefaultHubo()
{
	case "$1" in
	'help')
		echo
		echo
		echo 'Use this to overwrite the current'
		echo 'joint motor controller parameters'
		echo 'with their default values.'
		echo
		echo 'This can be used to restore functionality'
		echo 'if you have modified the JMC parameter'
		echo 'file in a bad way.'
		echo
		echo
	;;

	*)
		cp -f $DAEMON_DIR/default-joint.table $DAEMON_DIR/joint.table
	;;
	esac
}


PrintHuboStatus()
{
	echo TODO: Print out how Hubo is doing...
}

RestartHelp()
{
	echo
	echo
	echo 'This is exactly the same as running'
	echo '   sudo ./run stop'
	echo 'immediately followed by'
	echo '   sudo ./run start'
	echo
	echo


}

Install()
{
case "$2" in
        'sim-drc')
                sudo mkdir /etc/hubo-ach/sim/
                sudo chmod -R 777 /etc/hubo-ach/sim/
                cd /etc/hubo-ach/sim/
                sudo rm -r drchubo
		git clone https://github.com/hubo/drchubo.git 
                echo 'DRC Hubo URDF installed - must have OpenHubo Installed'
                echo 'If not installed type $ hubo-ach install sim-openhubo'
                echo ' '
        ;;
	'sim-openhubo')
                sudo mkdir /etc/hubo-ach/sim/
                sudo chmod -R 777 /etc/hubo-ach/sim/
                cd /etc/hubo-ach/sim/
                sudo rm -r openHubbo
		git clone https://github.com/hubo/openHubo.git 
		cd openHubo/util
		./clean-all.sh
		cd ..
		./setup
		echo 'OpenHubo Installed'
	;;
	'sim-all')
		echo 'install all sim items'
		hubo-ach install sim-openhubo
		hubo-ach install sim-drc
		echo 'installed all sim items'
	;;
        *)
                echo 'Install Options: '
		echo '	sim-drc		- DRC-Hubo URDF model (OpenHubo Install Required)'
		echo '  sim-openhubo    - OpenHubo URDF and base system'
        ;;
        esac
}

ShowUsage()
{
	echo
	echo 'start         : Start all channels and processes and consle'
        echo '              :Options:'
        echo '                     (no-arg)      : loads Hubo Plus joint table'
        echo '                     drc           : loads drc-hubo joint table'
	echo 'daemon        : Same as "start" but does not run hubo-ach console'
	echo 'run           : Start all channels and processes and NO consle'
	echo 'stop          : Close all channels and processes'
	echo 'restart       : Restart all channels and processes'
        echo 'console       : Starts the hubo conole'
	echo 'load          : Loads pre defigned home paramaters for the hubos'
	echo '              : Options:'
   	echo '              :       beta1         : Loads default home pos for DRC-Hubo-Beta-1'
   	echo '              :       beta2         : Loads default home pos for DRC-Hubo-Beta-2'
   	echo '              :       rainbow2      : Loads default RAINBOW home pos for DRC-Hubo-Beta-2'
        echo 'read          : Starts the hubo read application to read state data'
        echo 'make          : makes all the hubo channels'
	echo 'kill          : Emergency kill the daemon process'
	echo 'killprocess   : Kill all processes starting with hubo'
	echo 'killall       : Killprocess and rm all achshm-hubo ACH channels'
	echo "log           : Print out Hubo's latest log"
	echo 'savelog       : Save latest log to specified file'
	echo "param         : Sets Hubo's params from given file"
	echo "default       : Sets Hubo's params to default values"
	echo 'debug         : Run the daemon in debug mode'
	echo 'virtual       : Run the daemon without using CAN'
	echo 'sim           : Run usng non-real-time triggered mode'
	echo '              : Options:'
	echo '              :    (no-arg)       : start simtime triggered mode'
	echo '              :    openhubo       : Uses Open Hubo Simulator'
	echo '              :         Options:'
	echo '              :             physics    : Runs with Dynamics (SimTime triggered Mode)'
	echo '              :             nophysics  : Runs with No Dynamics'
	echo '              :                  Options: '
	echo '              :                        (no-arg)  : run in RT (free run) mode'
	echo '              :                             remote xxx.xxx.xxx.xxx  : same as remote command'
	echo '              :                        simtime   : Run in simtime triggered mode'
	echo '              :                             remote xxx.xxx.xxx.xxx  : same as remote command'
	echo 'remote        : Starts a remote connection to xxx.xxx.xxx.xxx via achd'
	echo 'killremote    : kills the remote connection'
	echo 'install       : Installs different packages including simulators'
	echo '		    : Options:'
	echo '              :     (no-arg)       : shows package list'
	echo '              :     PackageName    : Installs package with PackageName'
	echo '              :       sim-openhubo : openhubo base system'
        echo '              :       sim-drc      : drc hubo model (requires openhubo)'
        echo '              :       sim-all      : install all above packages'
	echo 'clean         : cleans and removes installed hubo-ach (source and apt-get)'
        echo 'update        : cleans, removes, then updates hubo-ach'
	echo 'config        : Do a first-time setup'
        echo 'nolog         : disables logging'
        echo 'clearlog      : deletes old log files'
	echo
	echo 'Type help after any of the above commands for'
	echo '   a more detailed description'
	echo
}


SetFlags()
{
for var in "$@"
do
#    echo "$var"
    case "$var" in
      'nolog' )
          FLAG_NO_LOG_MODE=1
      ;;
      'drc' )
          FLAG_DRC_HUBO=1
          FLAG_OPENHUBO=$FLAG_DRC_HUBO_SIM
          SetHuboType $var
      ;;
    esac

done
}



SetFlags $@
case "$1" in
# Start hubo-console
	'console' )
		StartConsole $@
	;;

# Start all channels and processes
	'make' )
		MakeAch $@
	;;

# Loads new home paramaters
	'load' )
		Load $@
	;;

# Start hubo-read
	'read' )
		Read $2
	;;

# Start all channels and processes and Console
	'start' )
		StartHubo $@
	;;

# runs in daemon only mode no console
	'daemon' )
                FLAG_NOCONSOLE=1
		StartHubo $@
        ;;

# Start remote via achd
	'remote' )
		Remote $2
	;;

# Kills remote connection
	'killremote' )
		KillRemote
	;;

# Installs various things
   	'install' )
		Install $@
	;;

# Start all channels and processes
	'run' )
		RunDaemon $@
	;;

# Close all channels and processes
	'stop' )
		StopHubo $2
	;;
# Clears all logs and deletes them
	'clearlog' )
		ClearLog
	;;


# Kill all hubo processies
	'killprocess' )
		Kill
	;;

# Kill all hubo processies and remove ach
	'killall' )
		KillAll
	;;
# removes hubo-ach
        'clean' )
  		Clean
	;;
# updates hubo-ach
	'update' )
		Update $2
	;;
# Close and then reopen all channels and processes
	'restart' )
		case "$2" in
		'help')
			RestartHelp
		;;
		*)
			StopHubo
			StartHubo
		;;
		esac
	;;

# Run the main daemon in virtual mode (does not require actual CAN communication)
	'virtual' )
		VirtualHubo $2
	;;

# Run OpenHubo simulator
	'openhubo' )
		OpenHubo $2
	;;

# Run simulator mode
	'sim' )
        	case "$2" in
			'openhubo' )
			OpenHubo $@
		;;
		
		*)
			Sim $3
		;;
		esac
	;;

# Emergency kill
	'kill' )
		KillHubo $2
	;;

# Set joint motor parameters
	'param' )
		ParamHubo $2
	;;

# Set joint motor parameters to default values
	'default' )
		DefaultHubo $2
	;;

# Print out Hubos logs
	'log' )
		LogHubo $2
	;;

# Save the latest log
	'savelog' )
		SaveLog $2
	;;

# Debug
	'debug' )
		DebugHubo $2
	;;

# Check the status of Hubo
	'status' )
		PrintHuboStatus $2
	;;


# Should be handled by `make install` or package manager -ntd
# Do a first-time setup for the daemon and scripts
	# 'config' )
	#         ConfigHubo $2
	# ;;

	*)
		ShowUsage
		exit 1
	;;
esac

exit 0

# Local Variables:
#  indent-tabs-mode:t
#  tab-width: 8
#  c-basic-offset: 8
# End:
